#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_FRAMES 10

// Function to check if a page is present in frames
bool isPagePresent(int frames[], int num_frames, int page) {
    for (int i = 0; i < num_frames; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

// FIFO Page Replacement Algorithm
int fifoPageFaults(int reference_string[], int num_pages, int num_frames) {
    int frames[num_frames];
    int page_faults = 0;
    int current_frame = 0;

    for (int i = 0; i < num_frames; i++)
        frames[i] = -1;

    for (int i = 0; i < num_pages; i++) {
        int page = reference_string[i];
        if (!isPagePresent(frames, num_frames, page)) {
            frames[current_frame] = page;
            current_frame = (current_frame + 1) % num_frames;
            page_faults++;
        }
    }

    return page_faults;
}

// LRU Page Replacement Algorithm
int lruPageFaults(int reference_string[], int num_pages, int num_frames) {
    int frames[num_frames];
    int recent_used[num_frames];
    int page_faults = 0;

    for (int i = 0; i < num_frames; i++) {
        frames[i] = -1;
        recent_used[i] = 0;
    }

    for (int i = 0; i < num_pages; i++) {
        int page = reference_string[i];
        bool page_hit = false;

        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_hit = true;
                recent_used[j] = i;
                break;
            }
        }

        if (!page_hit) {
            int least_recently_used = 0;
            for (int j = 1; j < num_frames; j++) {
                if (recent_used[j] < recent_used[least_recently_used])
                    least_recently_used = j;
            }

            frames[least_recently_used] = page;
            recent_used[least_recently_used] = i;
            page_faults++;
        }
    }

    return page_faults;
}

// Optimal Page Replacement Algorithm
int optimalPageFaults(int reference_string[], int num_pages, int num_frames) {
    int frames[num_frames];
    int page_faults = 0;

    for (int i = 0; i < num_frames; i++)
        frames[i] = -1;

    for (int i = 0; i < num_pages; i++) {
        int page = reference_string[i];
        bool page_hit = false;

        for (int j = 0; j < num_frames; j++) {
            if (frames[j] == page) {
                page_hit = true;
                break;
            }
        }

        if (!page_hit) {
            int farthest = i + 1;
            int replace_page = -1;

            for (int j = 0; j < num_frames; j++) {
                int k;
                for (k = i + 1; k < num_pages; k++) {
                    if (frames[j] == reference_string[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replace_page = j;
                        }
                        break;
                    }
                }

                if (k == num_pages) {
                    replace_page = j;
                    break;
                }
            }

            frames[replace_page] = page;
            page_faults++;
        }
    }

    return page_faults;
}

int main() {
    int reference_string[] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5};
    int num_pages = sizeof(reference_string) / sizeof(reference_string[0]);
    int num_frames = 3;  // Number of frames

    printf("FIFO Page Faults: %d\n", fifoPageFaults(reference_string, num_pages, num_frames));
    printf("LRU Page Faults: %d\n", lruPageFaults(reference_string, num_pages, num_frames));
    printf("Optimal Page Faults: %d\n", optimalPageFaults(reference_string, num_pages, num_frames));

    return 0;
}
