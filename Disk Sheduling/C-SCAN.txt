#include <stdio.h>
#include <stdlib.h>

int findClosest(int head, int request[], int n, int isUp) {
    if (isUp) {
        int i = 0;
        while (request[i] < head && i < n) {
            i++;
        }
        return i;
    } else {
        int i = n - 1;
        while (request[i] > head && i >= 0) {
            i--;
        }
        return i;
    }
}

int main() {
    int n, head, isUp;

    printf("Enter no of requests: ");
    scanf("%d", &n);

    int request[n];

    printf("Enter request queue: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &request[i]);
    }

    printf("Enter current R/W head: ");
    scanf("%d", &head);

    printf("Enter direction (1 for GREATER, 0 for LESSER): ");
    scanf("%d", &isUp);

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (request[j] > request[j + 1]) {
                int temp = request[j];
                request[j] = request[j + 1];
                request[j + 1] = temp;
            }
        }
    }

    int totalSeekTime = 0;
    int cur;

    if (isUp) {
        cur = findClosest(head, request, n, isUp);
        printf("Request\tTracks Traversed\n");
        for (int i = cur; i < n; i++) {
            printf("%d\t\t%d\n", request[i], abs(request[i] - head));
            totalSeekTime += abs(request[i] - head);
            head = request[i];
        }
        totalSeekTime += head - request[0];
        for (int i = 0; i < cur; i++) {
            printf("%d\t\t%d\n", request[i], abs(request[i] - head));
            totalSeekTime += abs(request[i] - head);
            head = request[i];
        }

    } else {
        cur = findClosest(head, request, n, isUp);
        printf("Request\tTracks Traversed\n");
        for (int i = cur; i >= 0; i--) {
            printf("%d\t\t%d\n", request[i], abs(request[i] - head));
            totalSeekTime += abs(request[i] - head);
            head = request[i];
        }
        totalSeekTime += request[n - 1] - head;
        for (int i = n - 1; i > cur; i--) {
            printf("%d\t\t%d\n", request[i], abs(request[i] - head));
            totalSeekTime += abs(request[i] - head);
            head = request[i];
        }
    }

    printf("Number of seek operations: %d\n", totalSeekTime);

    double avgSeekLength = (double)totalSeekTime / n;
    printf("Average seek length: %f\n", avgSeekLength);

    return 0;
}
