#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_REQUESTS 100

// Custom comparison function for sorting requests
int compare(const void *a, const void *b)
{
    return (*(int *)a - *(int *)b);
}

// Function to perform the SCAN algorithm
void SCAN(int requests[], int size, int initialPosition, const char *direction)
{
    int seekCount = 0;
    int head = initialPosition;

    // Arrays to store requests on the left and right sides
    int leftRequests[MAX_REQUESTS], rightRequests[MAX_REQUESTS];
    int leftSize = 0, rightSize = 0;

    // Initialize the left and right sides based on the initial direction
    if (strcmp(direction, "left") == 0)
    {
        leftRequests[leftSize++] = 0;
    }
    else if (strcmp(direction, "right") == 0)
    {
        rightRequests[rightSize++] = 199; // Adjust for the disk size
    }

    // Partition requests into left and right sides
    for (int i = 0; i < size; i++)
    {
        if (requests[i] < head)
        {
            leftRequests[leftSize++] = requests[i];
        }
        else
        {
            rightRequests[rightSize++] = requests[i];
        }
    }

    // Sort both sides
    qsort(leftRequests, leftSize, sizeof(int), compare);
    qsort(rightRequests, rightSize, sizeof(int), compare);

    // Process the requests while moving in the specified direction
    for (int i = 0; i < 2; i++)
    {
        if (strcmp(direction, "left") == 0)
        {
            for (int j = leftSize - 1; j >= 0; j--)
            {
                int track = leftRequests[j];
                printf("%d ", track); // Print the current track
                seekCount += abs(track - head);
                head = track;
            }
            direction = "right";
        }
        else if (strcmp(direction, "right") == 0)
        {
            for (int j = 0; j < rightSize; j++)
            {
                int track = rightRequests[j];
                printf("%d ", track); // Print the current track
                seekCount += abs(track - head);
                head = track;
            }
            direction = "left";
        }
    }

    printf("\nSeek Time: %d\n", seekCount);
}

int main()
{
    int requestCount, initialPosition;
    char direction[10];

    printf("Enter initial position of R/W head: ");
    scanf("%d", &initialPosition);

    printf("Enter Direction (left or right): ");
    scanf("%s", direction);

    printf("Enter the number of requests: ");
    scanf("%d", &requestCount);

    int requests[MAX_REQUESTS];

    printf("Enter the requests: ");
    for (int i = 0; i < requestCount; i++)
    {
        scanf("%d", &requests[i]);
    }

    SCAN(requests, requestCount, initialPosition, direction);

    return 0;
}
