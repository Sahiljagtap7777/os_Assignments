#include <iostream>
#include <queue>
#include <map>
using namespace std;

class Process
{
    int id;
    int burstTime;
    int arrivalTime;
    int completionTime;
    int turnAroundTime;
    int waitingTime;

public:
    int getId() { return id; }
    int getBurstTime() { return burstTime; }
    int getArrivalTime() { return arrivalTime; }
    int getCompletionTime() { return completionTime; }
    int getTurnAroundTime() { return turnAroundTime; }
    int getWaitingTime() { return waitingTime; }

    void setId(int id) { this->id = id; }
    void setBurstTime(int burstTime) { this->burstTime = burstTime; }
    void setArrivalTime(int arrivalTime) { this->arrivalTime = arrivalTime; }
    void setCompletionTime(int completionTime) { this->completionTime = completionTime; }
    void setTurnAroundTime(int turnAroundTime) { this->turnAroundTime = turnAroundTime; }
    void setWaitingTime(int waitingTime) { this->waitingTime = waitingTime; }
};

void display(Process P[], int jobCount)
{
    cout << "\n\n\tThe Process Status \n\n";
    cout << "\tProcess ID\tArrival Time\tBurst Time\tCompletion Time\tTurn Around Time\tWaiting Time";
    for (int i = 0; i < jobCount; ++i)
        cout << "\n\t\t" << P[i].getId() << "\t\t" << P[i].getArrivalTime() << "\t\t" << P[i].getBurstTime() << "\t\t"
             << P[i].getCompletionTime() << "\t\t" << P[i].getTurnAroundTime() << "\t\t" << P[i].getWaitingTime();
}

void getData(Process P[], int &jobCount)
{
    int x;
    for (int i = 0; i < jobCount; i++)
    {
        P[i].setId(i + 1);
        cout << "\nProcess ID: ";
        cout << P[i].getId();
        cout << "\nEnter the Process Arrival Time: ";
        cin >> x;
        P[i].setArrivalTime(x);
        cout << "\nEnter the Process Burst Time: ";
        cin >> x;
        P[i].setBurstTime(x);
    }
}

void RoundRobin(Process P[], int jobCount)
{
    int tQuantum;
    cout << "Time quantum : ";
    cin >> tQuantum;
    bool inQueue[jobCount + 1];
    fill(inQueue, inQueue + jobCount + 1, false);
    map<int, int> id_compl;
    int jobDone = 0, curTime = 0;
    queue<Process> ready_queue;
    do
    {
        for (int i = 0; i < jobCount; ++i)
        {
            if (!inQueue[P[i].getId()] && P[i].getArrivalTime() == curTime)
            {
                ready_queue.push(P[i]);
                inQueue[P[i].getId()] = true;
            }
        }
        if (!ready_queue.empty())
        {
            Process p = ready_queue.front();
            ready_queue.pop();
            int tq = min(tQuantum, p.getBurstTime());
            int b = p.getBurstTime();
            p.setBurstTime(p.getBurstTime() - tq);
            for (int i = curTime + 1; i <= curTime + tq; ++i)
            {
                for (int j = 0; j < jobCount; ++j)
                {
                    if (!inQueue[P[j].getId()] && P[j].getArrivalTime() == i)
                    {
                        ready_queue.push(P[j]);
                        inQueue[P[j].getId()] = true;
                    }
                }
            }
            curTime += tq;
            if (p.getBurstTime() == 0)
            {
                jobDone++;
                p.setCompletionTime(curTime);
                id_compl[p.getId()] = p.getCompletionTime();
            }
            else
            {
                ready_queue.push(p);
            }
        }
        else
        {
            curTime++;
        }
    } while (jobDone != jobCount);

    for (int i = 0; i < jobCount; ++i)
    {
        P[i].setCompletionTime(id_compl[P[i].getId()]);
        P[i].setTurnAroundTime(P[i].getCompletionTime() - P[i].getArrivalTime());
        P[i].setWaitingTime(P[i].getTurnAroundTime() - P[i].getBurstTime());
    }

    display(P, jobCount);
}

int main()
{
    int jobCount;
    cout << "\nNo. of processes : ";
    cin >> jobCount;
    Process P[jobCount];
    getData(P, jobCount);
    RoundRobin(P, jobCount);
    return 0;
}