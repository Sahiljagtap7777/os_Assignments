#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>

#define MaxItems 5
#define BufferSize 5

int in = 0;
int out = 0;
int buffer[BufferSize];
pthread_mutex_t mutex;

void *producer(void *pno)
{
    int item;
    for (int i = 0; i < MaxItems; i++)
    {
        item = rand();

        pthread_mutex_lock(&mutex);
        while (((in + 1) % BufferSize) == out)
        {
            // Buffer is full, wait for a consumer to consume
            pthread_mutex_unlock(&mutex);
            usleep(1000); // Sleep for a short time to avoid busy-waiting
            pthread_mutex_lock(&mutex);
        }

        buffer[in] = item;
        printf("Producer %d: Insert Item %d at %d\n", *((int *)pno), buffer[in], in);
        in = (in + 1) % BufferSize;

        pthread_mutex_unlock(&mutex);
    }
}

void *consumer(void *cno)
{
    for (int i = 0; i < MaxItems; i++)
    {
        pthread_mutex_lock(&mutex);
        while (in == out)
        {
            // Buffer is empty, wait for a producer to produce
            pthread_mutex_unlock(&mutex);
            usleep(1000); // Sleep for a short time to avoid busy-waiting
            pthread_mutex_lock(&mutex);
        }

        int item = buffer[out];
        printf("Consumer %d: Remove Item %d from %d\n", *((int *)cno), item, out);
        out = (out + 1) % BufferSize;

        pthread_mutex_unlock(&mutex);
    }
}

int main()
{
    pthread_t pro[5], con[5];
    pthread_mutex_init(&mutex, NULL);

    int a[5] = {1, 2, 3, 4, 5};
    for (int i = 0; i < 5; i++)
    {
        pthread_create(&pro[i], NULL, (void *)producer, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_create(&con[i], NULL, (void *)consumer, (void *)&a[i]);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_join(pro[i], NULL);
    }
    for (int i = 0; i < 5; i++)
    {
        pthread_join(con[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    return 0;
}